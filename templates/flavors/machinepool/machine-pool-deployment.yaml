---
apiVersion: exp.cluster.x-k8s.io/v1alpha3
kind: MachinePool
metadata:
  name: "${CLUSTER_NAME}-mp-0"
spec:
  clusterName: "${CLUSTER_NAME}"
  replicas: ${WORKER_MACHINE_COUNT}
  template:
    spec:
      clusterName: "${CLUSTER_NAME}"
      version: "${KUBERNETES_VERSION}"
      bootstrap:
        configRef:
          name: "${CLUSTER_NAME}-mp-0"
          apiVersion: bootstrap.cluster.x-k8s.io/v1alpha3
          kind: KubeadmConfig
      infrastructureRef:
        name: "${CLUSTER_NAME}-mp-0"
        apiVersion: exp.infrastructure.cluster.x-k8s.io/v1alpha3
        kind: AzureMachinePool
---
apiVersion: exp.infrastructure.cluster.x-k8s.io/v1alpha3
kind: AzureMachinePool
metadata:
  name: "${CLUSTER_NAME}-mp-0"
spec:
  location: ${AZURE_LOCATION}
  template:
    vmSize: ${AZURE_NODE_MACHINE_TYPE}
    osDisk:
      osType: "Linux"
      diskSizeGB: 30
      managedDisk:
        storageAccountType: "Premium_LRS"
    sshPublicKey: ${AZURE_SSH_PUBLIC_KEY}
---
apiVersion: bootstrap.cluster.x-k8s.io/v1alpha3
kind: KubeadmConfig
metadata:
  name: "${CLUSTER_NAME}-mp-0"
spec:
  useExperimentalRetryJoin: true
  joinConfiguration:
    nodeRegistration:
      name: '{{ ds.meta_data["local_hostname"] }}'
      kubeletExtraArgs:
        cloud-provider: azure
        cloud-config: /etc/kubernetes/azure.json
  files:
  - path: /etc/kubernetes/azure.json
    owner: "root:root"
    permissions: "0644"
    content: |
      {
        "cloud": "AzurePublicCloud",
        "tenantId": "${AZURE_TENANT_ID}",
        "subscriptionId": "${AZURE_SUBSCRIPTION_ID}",
        "aadClientId": "${AZURE_CLIENT_ID}",
        "aadClientSecret": "${AZURE_CLIENT_SECRET}",
        "resourceGroup": "${CLUSTER_NAME}",
        "securityGroupName": "${CLUSTER_NAME}-node-nsg",
        "location": "${AZURE_LOCATION}",
        "vmType": "vmss",
        "vnetName": "${CLUSTER_NAME}-vnet",
        "vnetResourceGroup": "${CLUSTER_NAME}",
        "subnetName": "${CLUSTER_NAME}-node-subnet",
        "routeTableName": "${CLUSTER_NAME}-node-routetable",
        "loadBalancerSku": "standard",
        "maximumLoadBalancerRuleCount": 250,
        "useManagedIdentityExtension": false,
        "useInstanceMetadata": true
      }
